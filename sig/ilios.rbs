module Ilios
  VERSION: String

  module Cassandra
    class Cluster
      PROTOCOL_VERSION_V1: Integer
      PROTOCOL_VERSION_V2: Integer
      PROTOCOL_VERSION_V3: Integer
      PROTOCOL_VERSION_V4: Integer
      PROTOCOL_VERSION_V5: Integer
      PROTOCOL_VERSION_DSEV1: Integer
      PROTOCOL_VERSION_DSEV2: Integer

      def connect: () -> Ilios::Cassandra::Session
      def hosts: (Array[String]) -> self
      def port: (Integer) -> self
      def keyspace: (String) -> self
      def protocol_version: (Integer) -> self
      def connect_timeout: (Integer) -> self
      def request_timeout: (Integer) -> self
      def resolve_timeout: (Integer) -> self
      def constant_speculative_execution_policy: (Integer, Integer) -> self
    end

    class Session
      def prepare_async: (String) -> Ilios::Cassandra::Future
      def prepare: (String) -> Ilios::Cassandra::Statement

      def execute_async: (Ilios::Cassandra::Statement) -> Ilios::Cassandra::Future
      def execute: (Ilios::Cassandra::Statement) -> Ilios::Cassandra::Result
    end

    class Statement
      def bind: (Hash[Symbol | String, untyped]) -> self
      def page_size=: (Integer) -> self
      def idempotent=: (true | false) -> self
    end

    class Future
      def on_success: () { (Ilios::Cassandra::Result) -> void } -> self
      def on_failure: () { () -> void } -> self
      def await: () -> self
    end

    class Result
      type row_type = Hash[String, untyped]

      include Enumerable[row_type]

      def each: () { (row_type) -> void } -> void
              | () -> ::Enumerator[row_type, self]
      def next_page: () -> (Ilios::Cassandra::Result | nil)
    end
  end
end
